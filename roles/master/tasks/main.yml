---

- copy: >
    src="{{ kube_binaries_dir }}/{{ item }}"
    dest="/usr/local/bin/{{ item }}"
    mode=0774
  with_items:
    - "kube-apiserver"
    - "kube-controller-manager"
    - "kube-scheduler"
    - "kube-proxy"
    - "kubectl"

# apiserver
- template: src=apiserver.conf.j2 dest=/etc/kubernetes/apiserver.conf
- copy: src=kube-apiserver.service dest=/etc/systemd/system
  notify:
    - reload systemd
    - restart master
  name: "setup kube-apiserver.service"

# controller-manager
- set_fact: "controller_manager_token={{ item.token }}"
  with_items: "{{ tokens }}"
  when: "{{ item.name == 'controller-manager' }}"
  name: "gather controller manager token"

- template: >
    src=kube-controller-manager.service.j2
    dest=/etc/systemd/system/kube-controller-manager.service
  notify:
    - reload systemd
    - restart master
  name: "setup kube-controller-manager.service"

- template: src=controller-manager.kubeconfig.j2 dest=/etc/kubernetes/controller-manager.kubeconfig
  notify:
    - restart master
  name: "setup controller-manager.kubeconfig"

# scheduler
- set_fact: "scheduler_token={{ item.token }}"
  with_items: "{{ tokens }}"
  when: "{{ item.name == 'scheduler' }}"
  name: "gather scheduler token"

- template: >
    src=kube-scheduler.service.j2
    dest=/etc/systemd/system/kube-scheduler.service
  notify:
    - reload systemd
    - restart master
  name: "setup kube-scheduler.service"

- template: src=scheduler.kubeconfig.j2 dest=/etc/kubernetes/scheduler.kubeconfig
  notify:
    - restart master
  name: "setup scheduler.kubeconfig"

# kube-proxy
- template: src=kube-proxy.service.j2 dest=/etc/systemd/system/kube-proxy.service

# enable services
- service: "name={{ item }} enabled=yes"
  with_items:
    - "kube-apiserver"
    - "kube-controller-manager"
    - "kube-scheduler"
    - "kube-proxy"

- local_action:
    shell pwd
  register: local_current_dir
  changed_when: false
  become: no

- local_action:
    template
      src=kubectl.kubeconfig.j2
      dest="./kubectl.kubeconfig"
  become: no

- local_action: 
    shell
      kubectl config set-cluster default-cluster --server={{kube_apiserver}} --certificate-authority=ca.crt;
      kubectl config set-credentials default-admin --certificate-authority=ca.crt --client-key=kubecfg.key --client-certificate=kubecfg.crt;
      kubectl config set-context default-system --cluster=default-cluster --user=default-admin;
      kubectl config use-context default-system;
  name: "set host admin kubectl"
  become: no

#- debug: var=kube_status
